package com.ydd.zhichat.ui.circle.range;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.alibaba.fastjson.JSON;import com.bumptech.glide.Glide;import com.ydd.zhichat.AppConstant;import com.ydd.zhichat.R;import com.ydd.zhichat.bean.Area;import com.ydd.zhichat.bean.UploadFileResult;import com.ydd.zhichat.db.InternationalizationHelper;import com.ydd.zhichat.helper.AvatarHelper;import com.ydd.zhichat.helper.DialogHelper;import com.ydd.zhichat.helper.LoginHelper;import com.ydd.zhichat.helper.UploadService;import com.ydd.zhichat.ui.account.LoginHistoryActivity;import com.ydd.zhichat.ui.base.BaseActivity;import com.ydd.zhichat.ui.map.MapPickerActivity;import com.ydd.zhichat.util.DeviceInfoUtil;import com.ydd.zhichat.util.LogUtils;import com.ydd.zhichat.util.ToastUtil;import com.ydd.zhichat.util.log.FileUtils;import com.ydd.zhichat.view.SelectFileDialog;import com.ydd.zhichat.view.SelectionFrame;import com.ydd.zhichat.view.TipDialog;import com.ydd.zhichat.volley.Result;import com.xuan.xuanhttplibrary.okhttp.HttpUtils;import com.xuan.xuanhttplibrary.okhttp.callback.BaseCallback;import com.xuan.xuanhttplibrary.okhttp.result.ObjectResult;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import okhttp3.Call;/** * 发布文件 */public class SendFileActivity extends BaseActivity implements View.OnClickListener {    private static final int REQUEST_CODE_SELECT_LOCATE = 3;  // 位置    private static final int REQUEST_CODE_SELECT_TYPE = 4;    // 谁可以看    private static final int REQUEST_CODE_SELECT_REMIND = 5;  // 提醒谁看    private EditText mTextEdit;    // 所在位置    private TextView mTVLocation;    // 谁可以看    private TextView mTVSee;    // 提醒谁看    private TextView mTVAt;    // File item    private ImageView mAddFileIv;    private RelativeLayout mSendFileRl;    private ImageView mFileIv;    private TextView mFileNameTv;    // 发布    private Button mReleaseBtn;    // data    private String mFilePath;    private SelectionFrame mSelectionFrame;    // 部分可见 || 不给谁看 有值 用于恢复谁可以看的界面    private String str1;    private String str2;    private String str3;    // 默认为公开    private int visible = 1;    // 谁可以看 || 不给谁看    private String lookPeople;    // 提醒谁看    private String atlookPeople;    // 默认不发位置    private double latitude;    private double longitude;    private String address;    private String mFileData;    private CheckBox checkBox;    private boolean isBoolBan;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_send_file);        initActionBar();        initView();        initEvent();    }    private void initActionBar() {        getSupportActionBar().hide();        findViewById(R.id.iv_title_left).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                isExitNoPublish();            }        });        TextView tvTitle = (TextView) findViewById(R.id.tv_title_center);        tvTitle.setText(getString(R.string.public_a_file));    }    private void initView() {        checkBox = findViewById(R.id.cb_ban);        checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                Log.e("zx", "onCheckedChanged: " + isChecked);                isBoolBan = isChecked;            }        });        mTextEdit = (EditText) findViewById(R.id.text_edit);        mTextEdit.setHint(InternationalizationHelper.getString("addMsgVC_Mind"));        // 所在位置        mTVLocation = (TextView) findViewById(R.id.tv_location);        // 谁可以看        mTVSee = (TextView) findViewById(R.id.tv_see);        // 提醒谁看        mTVAt = (TextView) findViewById(R.id.tv_at);        mAddFileIv = findViewById(R.id.add_file_iv);        mSendFileRl = findViewById(R.id.send_file_rl);        mFileIv = findViewById(R.id.file_img);        mFileNameTv = findViewById(R.id.file_name);        mReleaseBtn = (Button) findViewById(R.id.release_btn);//        mReleaseBtn.setBackgroundColor(SkinUtils.getSkin(this).getAccentColor());        mReleaseBtn.setText(InternationalizationHelper.getString("JX_Publish"));    }    private void initEvent() {        if (coreManager.getConfig().disableLocationServer) {            findViewById(R.id.rl_location).setVisibility(View.GONE);        } else {            findViewById(R.id.rl_location).setOnClickListener(this);        }        findViewById(R.id.rl_see).setOnClickListener(this);        findViewById(R.id.rl_at).setOnClickListener(this);        mAddFileIv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SelectFileDialog dialog = new SelectFileDialog(SendFileActivity.this, new SelectFileDialog.OptionFileListener() {                    @Override                    public void option(List<File> files) {                        if (files != null && files.size() > 0) {                            File file = files.get(0);// 最多选择一个文件，取第一个即可                            mFilePath = file.getPath();                            int index = mFilePath.lastIndexOf(".");                            if (index != -1) {                                String type = mFilePath.substring(index + 1).toLowerCase();                                if (type.equals("png") || type.equals("jpg")) {                                    Glide.with(mContext)                                            .load(mFilePath)                                            .error(R.drawable.image_download_fail_icon)                                            .into(mFileIv);                                } else {                                    AvatarHelper.getInstance().fillFileView(type, mFileIv);                                }                            }                            mFileNameTv.setText(file.getName());                            mSendFileRl.setVisibility(View.VISIBLE);                        }                    }                    @Override                    public void intent() {                        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);                        intent.setType("*/*");//设置类型，我这里是任意类型，任意后缀的可以这样写。                        intent.addCategory(Intent.CATEGORY_OPENABLE);                        startActivityForResult(intent, FileUtils.REQUEST_CODE_SELECT_FILE);                    }                });                dialog.maxOpt = 1;// 一次只能发布一个文件                dialog.show();            }        });        mReleaseBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (TextUtils.isEmpty(mFilePath)) {                    Toast.makeText(SendFileActivity.this, InternationalizationHelper.getString("JX_AddFile"), Toast.LENGTH_SHORT).show();                    return;                }                new UploadTask().execute();            }        });    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.rl_location:                // 所在位置                Intent intent1 = new Intent(this, MapPickerActivity.class);                startActivityForResult(intent1, REQUEST_CODE_SELECT_LOCATE);                break;            case R.id.rl_see:                // 谁可以看                Intent intent2 = new Intent(this, SeeCircleActivity.class);                intent2.putExtra("THIS_CIRCLE_TYPE", visible - 1);                intent2.putExtra("THIS_CIRCLE_PERSON_RECOVER1", str1);                intent2.putExtra("THIS_CIRCLE_PERSON_RECOVER2", str2);                intent2.putExtra("THIS_CIRCLE_PERSON_RECOVER3", str3);                startActivityForResult(intent2, REQUEST_CODE_SELECT_TYPE);                break;            case R.id.rl_at:                // 提醒谁看                if (visible == 2) {                    final TipDialog tipDialog = new TipDialog(this);                    tipDialog.setmConfirmOnClickListener(getString(R.string.tip_private_cannot_use_this), new TipDialog.ConfirmOnClickListener() {                        @Override                        public void confirm() {                            tipDialog.dismiss();                        }                    });                    tipDialog.show();                } else {                    Intent intent3 = new Intent(this, AtSeeCircleActivity.class);                    intent3.putExtra("REMIND_TYPE", visible);                    intent3.putExtra("REMIND_PERSON", lookPeople);                    startActivityForResult(intent3, REQUEST_CODE_SELECT_REMIND);                }                break;        }    }    @Override    public void onBackPressed() {        isExitNoPublish();    }    private void isExitNoPublish() {        if (!TextUtils.isEmpty(mFilePath)) {            mSelectionFrame = new SelectionFrame(SendFileActivity.this);            mSelectionFrame.setSomething(getString(R.string.app_name), getString(R.string.tip_has_file_no_public), new SelectionFrame.OnSelectionFrameClickListener() {                @Override                public void cancelClick() {                }                @Override                public void confirmClick() {                    finish();                }            });            mSelectionFrame.show();        } else {            finish();        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        if (requestCode == 1 && resultCode == RESULT_OK && data != null) {        } else if (resultCode == RESULT_OK && requestCode == FileUtils.REQUEST_CODE_SELECT_FILE) {            mFilePath = FileUtils.getPath(SendFileActivity.this, data.getData());            if (mFilePath == null) {                ToastUtil.showToast(mContext, R.string.tip_file_not_supported);                return;            }            int index = mFilePath.lastIndexOf(".");            if (index != -1) {                String type = mFilePath.substring(index + 1).toLowerCase();                if (type.equals("png") || type.equals("jpg")) {                    Glide.with(mContext)                            .load(mFilePath)                            .error(R.drawable.image_download_fail_icon)                            .into(mFileIv);                } else {                    AvatarHelper.getInstance().fillFileView(type, mFileIv);                }            }            File file = new File(mFilePath);            mFileNameTv.setText(file.getName());            mSendFileRl.setVisibility(View.VISIBLE);        } else if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_SELECT_LOCATE) {            // 选择位置返回            latitude = data.getDoubleExtra(AppConstant.EXTRA_LATITUDE, 0);            longitude = data.getDoubleExtra(AppConstant.EXTRA_LONGITUDE, 0);            address = data.getStringExtra(AppConstant.EXTRA_ADDRESS);            if (latitude != 0 && longitude != 0 && !TextUtils.isEmpty(address)) {                Log.e("zq", "纬度:" + latitude + "   经度：" + longitude + "   位置：" + address);                mTVLocation.setText(address);            } else {                ToastUtil.showToast(mContext, InternationalizationHelper.getString("JXLoc_StartLocNotice"));            }        } else if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_SELECT_TYPE) {            // 谁可以看返回            visible = data.getIntExtra("THIS_CIRCLE_TYPE", 1);            if (visible == 1) {                mTVSee.setText(getString(R.string.publics));            } else if (visible == 2) {                mTVSee.setText(getString(R.string.privates));                if (!TextUtils.isEmpty(atlookPeople)) {                    final TipDialog tipDialog = new TipDialog(this);                    tipDialog.setmConfirmOnClickListener(getString(R.string.tip_private_cannot_notify), new TipDialog.ConfirmOnClickListener() {                        @Override                        public void confirm() {                            tipDialog.dismiss();                            // 清空提醒谁看列表                            atlookPeople = "";                            mTVAt.setText("");                        }                    });                    tipDialog.show();                }            } else if (visible == 3) {                lookPeople = data.getStringExtra("THIS_CIRCLE_PERSON");                String looKenName = data.getStringExtra("THIS_CIRCLE_PERSON_NAME");                mTVSee.setText(looKenName);            } else if (visible == 4) {                lookPeople = data.getStringExtra("THIS_CIRCLE_PERSON");                String lookName = data.getStringExtra("THIS_CIRCLE_PERSON_NAME");                mTVSee.setText("除去 " + lookName);            }            str1 = data.getStringExtra("THIS_CIRCLE_PERSON_RECOVER1");            str2 = data.getStringExtra("THIS_CIRCLE_PERSON_RECOVER2");            str3 = data.getStringExtra("THIS_CIRCLE_PERSON_RECOVER3");        } else if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_SELECT_REMIND) {            // 提醒谁看返回            atlookPeople = data.getStringExtra("THIS_CIRCLE_REMIND_PERSON");            String atLookPeopleName = data.getStringExtra("THIS_CIRCLE_REMIND_PERSON_NAME");            mTVAt.setText(atLookPeopleName);        }    }    public void sendFile() {        Map<String, String> params = new HashMap<String, String>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        // 消息类型：1=文字消息；2=图文消息；3=语音消息；4=视频消息 5=文件消息；        params.put("type", "5");        // 消息标记：1：求职消息；2：招聘消息；3：普通消息；        params.put("flag", "3");        // 消息隐私范围：1=公开；2=私密；3=部分选中好友可见；4=不给谁看        params.put("visible", String.valueOf(visible));        if (visible == 3) {            // 谁可以看            params.put("userLook", lookPeople);        } else if (visible == 4) {            // 不给谁看            params.put("userNotLook", lookPeople);        }        // 提醒谁看        if (!TextUtils.isEmpty(atlookPeople)) {            params.put("userRemindLook", atlookPeople);        }        params.put("isAllowComment", isBoolBan ? String.valueOf(1) : String.valueOf(0));        // 消息内容        params.put("text", mTextEdit.getText().toString());        params.put("files", mFileData);        /**         * 所在位置         */        if (!TextUtils.isEmpty(address)) {            // 纬度            params.put("latitude", String.valueOf(latitude));            // 经度            params.put("longitude", String.valueOf(longitude));            // 位置            params.put("location", address);        }        // 必传，之前删除该字段，发布说说，服务器返回接口内部异常        Area area = Area.getDefaultCity();        if (area != null) {            params.put("cityId", String.valueOf(area.getId()));// 城市Id        } else {            params.put("cityId", "0");        }        /**         * 附加信息         */        // 手机型号        params.put("model", DeviceInfoUtil.getModel());        // 手机操作系统版本号        params.put("osVersion", DeviceInfoUtil.getOsVersion());        if (!TextUtils.isEmpty(DeviceInfoUtil.getDeviceId(mContext))) {            // 设备序列号            params.put("serialNumber", DeviceInfoUtil.getDeviceId(mContext));        }        DialogHelper.showDefaulteMessageProgressDialog(SendFileActivity.this);        HttpUtils.get().url(coreManager.getConfig().MSG_ADD_URL)                .params(params)                .build()                .execute(new BaseCallback<String>(String.class) {                    @Override                    public void onResponse(ObjectResult<String> result) {                        DialogHelper.dismissProgressDialog();                        Intent intent = new Intent();                        intent.putExtra(AppConstant.EXTRA_MSG_ID, result.getData());                        setResult(RESULT_OK, intent);                        finish();                    }                    @Override                    public void onError(Call call, Exception e) {                        DialogHelper.dismissProgressDialog();                        ToastUtil.showErrorNet(SendFileActivity.this);                    }                });    }    private class UploadTask extends AsyncTask<Void, Integer, Integer> {        private String message;        @Override        protected void onPreExecute() {            super.onPreExecute();            DialogHelper.showDefaulteMessageProgressDialog(SendFileActivity.this);        }        /**         * 上传的结果： <br/>         * return 1 Token过期，请重新登陆 <br/>         * return 2 视频为空，请重新录制 <br/>         * return 3 上传出错<br/>         * return 4 上传成功<br/>         */        @Override        protected Integer doInBackground(Void... params) {            if (!LoginHelper.isTokenValidation()) {                return 1;            }            if (TextUtils.isEmpty(mFilePath)) {                return 2;            }            Map<String, String> mapParams = new HashMap<String, String>();            mapParams.put("access_token", coreManager.getSelfStatus().accessToken);            mapParams.put("userId", coreManager.getSelf().getUserId() + "");            mapParams.put("validTime", "-1");// 文件有效期            List<String> dataList = new ArrayList<String>();            dataList.add(mFilePath);            String result = new UploadService().uploadFile(coreManager.getConfig().UPLOAD_URL, mapParams, dataList);            if (TextUtils.isEmpty(result)) {                return 3;            }            LogUtils.log("上传文件<" + mFilePath + ">返回：" + result);            UploadFileResult recordResult = JSON.parseObject(result, UploadFileResult.class);            boolean success = Result.defaultParser(SendFileActivity.this, recordResult, true);            if (success) {                if (recordResult.getSuccess() != recordResult.getTotal()) {// 上传丢失了某些文件                    return 3;                }                if (recordResult.getData() != null) {                    UploadFileResult.Data data = recordResult.getData();/*                    if (data.getFiles() != null && data.getFiles().size() > 0) {                        while (data.getFiles().size() > 1) {// 因为正确情况下只有一个文件，所以要保证只有一个文件                            data.getFiles().removeItemMessage(data.getFiles().size() - 1);                        }                        data.getFiles().get(0).setSize(new File(mFilePath).length());                        mFileData = JSON.toJSONString(data.getFiles(), UploadFileResult.sImagesFilter);                    } else {                        return 3;                    }*/                    if (data.getImages() != null && data.getImages().size() > 0) {                        data.getImages().get(0).setSize(new File(mFilePath).length());                        mFileData = JSON.toJSONString(data.getImages());                    } else if (data.getAudios() != null && data.getAudios().size() > 0) {                        data.getAudios().get(0).setSize(new File(mFilePath).length());                        mFileData = JSON.toJSONString(data.getAudios());                    } else if (data.getVideos() != null && data.getVideos().size() > 0) {                        data.getVideos().get(0).setSize(new File(mFilePath).length());                        mFileData = JSON.toJSONString(data.getVideos());                    } else if (data.getOthers() != null && data.getOthers().size() > 0) {                        data.getOthers().get(0).setSize(new File(mFilePath).length());                        mFileData = JSON.toJSONString(data.getOthers());                    } else {                        return 3;                    }                    return 4;                } else {// 没有文件数据源，失败                    return 3;                }            } else {                return 3;            }        }        @Override        protected void onPostExecute(Integer result) {            super.onPostExecute(result);            if (result == 1) {                DialogHelper.dismissProgressDialog();                startActivity(new Intent(SendFileActivity.this, LoginHistoryActivity.class));            } else if (result == 2) {                DialogHelper.dismissProgressDialog();                ToastUtil.showToast(SendFileActivity.this, InternationalizationHelper.getString("JXAlert_NotHaveFile"));            } else if (result == 3) {                DialogHelper.dismissProgressDialog();                ToastUtil.showToast(SendFileActivity.this, R.string.upload_failed);            } else {                sendFile();            }        }    }}